<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD/Mapper 3.0/EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">

	<resultMap type="semi.project.bookmaroo.board.model.vo.Board" id="BoardResultMap">
		<id property="boardNo" column="B_NO"/>
		<result property="memberNo" column="M_NO"/>
		<result property="writer" column="M_NAME"/>
		<result property="boardTitle" column="B_TITLE"/>
		<result property="boardContent" column="B_CONTENT"/>
		<result property="boardUpdateDate" column="B_UPDATE_DATE"/>
		<result property="boardViews" column="B_VIEWS"/>
		<result property="boardType" column="B_TYPE"/>
	</resultMap>
	
	<resultMap type="semi.project.bookmaroo.board.model.vo.Reply" id="ReplyResultMap">
		<id property="replyNo" column="REPLY_NO"/>
		<result property="memberNo" column="M_NO"/>
		<result property="replyWriter" column="M_NAME"/>
		<result property="refBoardNo" column="REF_BOARD_NO"/>
		<result property="replyContent" column="REPLY_CONTENT"/>
		<result property="replyUpdateDate" column="REPLY_UPDATE_DATE"/>
	</resultMap>
	
	<resultMap type="semi.project.bookmaroo.board.model.vo.Review" id="ReviewResultMap">
		<id property="reviewNo" column="REVIEW_NO"/>
		<result property="memberNo" column="M_NO"/>
		<result property="reviewerName" column="M_NAME"/>
		<result property="rentNo" column="RENT_NO"/>
		<result property="bookName" column="B_NAME"/>
		<result property="bookImage" column="B_IMAGE"/>
		<result property="reviewTitle" column="REVIEW_TITLE"/>
		<result property="reviewContent" column="REVIEW_CONTENT"/>
		<result property="reviewUpdateDate" column="REVIEW_UPDATE_DATE"/>
		<result property="reviewViews" column="REVIEW_VIEWS"/>
		<result property="starRating" column="STAR_RATING"/>
		<result property="reviewBookISBN" column="REVIEW_BOOK_ISBN"/>
	</resultMap>
	
	<resultMap type="semi.project.bookmaroo.book.model.vo.Book" id="BookResultMap">
		<id property="bookISBN" column="ISBN"/>
		<result property="bookName" column="B_NAME"/>
		<result property="summary" column="SUMMARY"/>
		<result property="gmName" column="GM_NAME"/>
		<result property="gsName" column="GS_NAME"/>
		<result property="author" column="AUTHOR"/>
		<result property="publisher" column="PUBLISHER"/>
		<result property="publication" column="PUBLICATION"/>
		<result property="bookCount" column="B_COUNT"/>
		<result property="bookImage" column="B_IMAGE"/>
		<result property="resistDate" column="RESIST_DATE"/>
		<result property="isRental" column="IS_RENTAL"/>
		<result property="bookNumber" column="BD_NO"/>
	</resultMap>

	<!-- board 테이블에서 보드타입별 총 게시글 수를 카운팅 (i : 보드타입) -->
	<select id="countBoardList" resultType="_int">
		select count(*)
		from board
		where B_TYPE = #{i}
	</select>

	<!-- board 테이블에서 보드타입별 모든 게시글을 객체로 list에 담아 가져옴 -->
	<select id="getBoardList" resultMap="BoardResultMap">
		select B_NO, M_NO, M_NAME, B_TITLE, B_CONTENT, B_UPDATE_DATE, B_VIEWS, B_TYPE
		from board
			join member using(M_NO)
		where B_TYPE = #{i}
		order by B_NO desc	
	</select>
	
	<!-- 검색결과에 부합하는 게시글 수를 카운팅 -->
	<select id="countSearchList" parameterType="hashMap" resultType="_int">
		select count(*)
		from board
			join member using(M_NO)
		where B_TYPE = #{boardType}
		<if test="searchType == 'all'">
			and (
				B_TITLE like '%' || #{search} || '%'
				or B_CONTENT like '%' || #{search} || '%'
				or M_NAME like '%' || #{search} || '%'
			)
		</if>
		<if test="searchType == 'title'">
			and B_TITLE like '%' || #{search} || '%'
		</if>
		<if test="searchType == 'content'">
			and B_CONTENT like '%' || #{search} || '%'
		</if>
		<if test="searchType == 'writer'">
			and M_NAME like '%' || #{search} || '%'
		</if>
	</select>
	
	<!-- 검색결과의 부합하는 게시글 정보를 가져옴 -->
	<select id="getSearchList" parameterType="hashMap" resultMap="BoardResultMap">
		select B_NO, M_NO, M_NAME, B_TITLE, B_CONTENT, B_UPDATE_DATE, B_VIEWS, B_TYPE
		from board
			join member using(M_NO)
		where B_TYPE = #{boardType}
		<if test="searchType == 'all'">
			and (
				B_TITLE like '%' || #{search} || '%'
				or B_CONTENT like '%' || #{search} || '%'
				or M_NAME like '%' || #{search} || '%'
			)
		</if>
		<if test="searchType == 'title'">
			and B_TITLE like '%' || #{search} || '%'
		</if>
		<if test="searchType == 'content'">
			and B_CONTENT like '%' || #{search} || '%'
		</if>
		<if test="searchType == 'writer'">
			and M_NAME like '%' || #{search} || '%'
		</if>
		order by B_NO desc
	</select>

	<!-- 조회수 증가 -->
	<update id="increaseViewsCount">
		update board
		set B_VIEWS = B_VIEWS + 1
		where B_NO = #{boardNo}
	</update>
	
	<!-- 게시글 상세조회 -->
	<select id="selectBoard" resultMap="BoardResultMap">
		select B_NO, M_NO, M_NAME, B_TITLE, B_CONTENT, B_UPDATE_DATE, B_VIEWS, B_TYPE
		from board
			join member using(M_NO)
		where B_NO = #{boardNo}	
	</select>

	<!-- 게시글에 달린 댓글 수 카운팅 -->
	<select id="countReplyList" resultType="_int">
		select count(*)
		from reply
		where REF_BOARD_NO = #{boardNo}
	</select>

	<!-- 게시글에 달린 댓글 불러옴 -->
	<select id="getReplyList" resultMap="ReplyResultMap">
		select REPLY_NO, M_NO, M_NAME, REF_BOARD_NO, REPLY_CONTENT, REPLY_UPDATE_DATE
		from reply
			join member using (M_NO)
		where REF_BOARD_NO = #{boardNo}
		order by REPLY_NO desc
	</select>

	<!-- 게시글 삭제 -->
	<delete id="deletePost">
		delete
		from board 
		where B_NO = #{boardNo}
	</delete>
	
	<!-- 댓글 등록 -->
	<insert id="insertReply">
		insert into Reply
		values
		(default, #{memberNo}, #{refBoardNo}, #{replyContent}, sysdate)
	</insert>

	<!-- 삭제할 댓글 정보 조회 -->
	<select id="selectReplyForDelete" resultMap="ReplyResultMap">
		select *
		from reply
		where REPLY_NO = #{rNo}
	</select>

	<!-- 댓글 삭제 -->
	<delete id="deleteReply">
		delete from reply
		where REPLY_NO = #{rNo}
	</delete>

	<!-- 총 리뷰 게시글 수 조회 -->
	<select id="countReviewList" resultType="_int">
		select count(*)
		from review
	</select>

	<!-- 리뷰 게시글 목록 조회 -->
	<select id="getReviewList" resultMap="ReviewResultMap">
		select REVIEW_NO, B_NAME, B_IMAGE, M_NAME, REVIEW_TITLE, REVIEW_UPDATE_DATE, REVIEW_VIEWS, STAR_RATING
		from review
		    join BOOK on (REVIEW_BOOK_ISBN = ISBN)
		    join MEMBER using (M_NO)
		order by REVIEW_NO desc
	</select>

	<select id="getMemberRentedBookList" resultMap="BookResultMap">
		select ISBN, B_NAME, GM_NAME, GS_NAME, AUTHOR, PUBLISHER, PUBLICATION, B_IMAGE
			from BOOK_CHECK
			    join BOOK_DETAIL using (BD_NO)
			    join BOOK using (ISBN)
			        join BOOK_GENRE_MAIN using (GM_CODE)
			        join BOOK_GENRE_SUB using (GS_CODE)
			where M_NO = #{i}
	</select>

	<select id="selectBook" resultMap="BookResultMap">
		select ISBN, B_NAME, AUTHOR, GM_NAME, GS_NAME, PUBLISHER, B_IMAGE
		from book
		    join BOOK_GENRE_MAIN using (GM_CODE)
		    join BOOK_GENRE_SUB using (GS_CODE)
		where b_name = #{bookName}
	</select>

	<select id="findRentNum" resultType="_int" parameterType="hashMap">
		select RENT_NO
			from book
			    join BOOK_DETAIL using (ISBN)
			    join BOOK_CHECK using (BD_NO)
			    join MEMBER using (M_NO)
			where B_NAME = #{booktitle} and M_NO = #{mNo}    
	</select>
	
	<insert id="insertReview">
		insert into REVIEW
		values
		(default, #{memberNo}, #{rentNo}, #{reviewTitle}, #{reviewContent}, sysdate, 0, #{starRating}, #{reviewBookISBN})
	</insert>

	<select id="getReviewContent" resultMap="ReviewResultMap">
		select REVIEW_NO, REVIEW_TITLE, REVIEW_CONTENT, REVIEW_UPDATE_DATE,
			   REVIEW_VIEWS, STAR_RATING, M_NAME, B_NAME, B_IMAGE, REVIEW_BOOK_ISBN 
		from REVIEW
			join MEMBER using(M_NO)
			join BOOK on (REVIEW_BOOK_ISBN = ISBN)
		where REVIEW_NO = #{reviewNo}
	</select>
	
	<delete id="deleteReview">
		delete from review
		where REVIEW_NO = #{reviewNo}
	</delete>
	
	<delete id="deleteReviewInDeleted">
		delete from reply
		where REF_BOARD_NO = #{reviewNo}
	</delete>

	<select id="selectBookWithISBN" resultMap="BookResultMap">
		select *
		from book
			join BOOK_GENRE_MAIN using (GM_CODE)
			join BOOK_GENRE_SUB using (GS_CODE)
		where ISBN = #{rentBookISBN}
	</select>
	
	<update id="reviewUpdate">
		update REVIEW
		set REVIEW_TITLE = #{reviewTitle},
			REVIEW_CONTENT = #{reviewContent},
			REVIEW_UPDATE_DATE = sysdate,
			STAR_RATING = #{starRating},
			REVIEW_BOOK_ISBN = #{reviewBookISBN}
		where REVIEW_NO = #{reviewNo}
	</update>
	
	<select id="countSearchReviewList" resultType="_int" parameterType="hashMap">
		select count(*)
		from review
			join book on (REVIEW_BOOK_ISBN = ISBN)
		where
		<if test="searchType == 'booktitle'">
			B_NAME like '%' || #{search} || '%'
		</if>
		<if test="searchType == 'title'">
			REVIEW_TITLE like '%' || #{search} || '%'
		</if>	
		<if test="searchType == 'content'">
			REVIEW_CONTENT like '%' || #{search} || '%'
		</if>
		<if test="searchType == 'all'">
			B_NAME like '%' || #{search} || '%'
			or REVIEW_TITLE like '%' || #{search} || '%'
			or REVIEW_CONTENT like '%' || #{search} || '%'
		</if>
	</select>
	
	<select id="getSearchReviewList" resultMap="ReviewResultMap" parameterType="hashMap">
		select REVIEW_NO, B_NAME, B_IMAGE, M_NAME, REVIEW_TITLE, REVIEW_UPDATE_DATE, REVIEW_VIEWS, STAR_RATING
		from review
		    join BOOK on (REVIEW_BOOK_ISBN = ISBN)
		    join MEMBER using (M_NO)
		where    
		<if test="searchType == 'booktitle'">
			B_NAME like '%' || #{search} || '%'
		</if>
		<if test="searchType == 'title'">
			REVIEW_TITLE like '%' || #{search} || '%'
		</if>	
		<if test="searchType == 'content'">
			REVIEW_CONTENT like '%' || #{search} || '%'
		</if>
		<if test="searchType == 'all'">
			B_NAME like '%' || #{search} || '%'
			or REVIEW_TITLE like '%' || #{search} || '%'
			or REVIEW_CONTENT like '%' || #{search} || '%'
		</if>    
		order by REVIEW_NO desc
	</select>
	
	<select id="insertInquiry" resultType="_int">
		insert into board
		values
		(default, #{memberNo}, #{boardTitle}, #{boardContent}, sysdate, 0, 2)
	</select>
	
	<update id="updateInquiry">
		update board
		set B_TITLE = #{boardTitle},
			B_CONTENT = #{boardContent}
		where B_NO = #{boardNo}	
	</update>
	
	<update id="increaseViewsCountForReview">
		update review
		set REVIEW_VIEWS = REVIEW_VIEWS + 1
		where REVIEW_NO = #{reviewNo}
	</update>
	
	
	
	
	
	
	
	
	
	
	
	
	<select id="selectBoardCK" resultMap="BoardResultMap">
		
	select B_NO, M_NO, M_NAME, B_TITLE, B_CONTENT, B_UPDATE_DATE, B_VIEWS, B_TYPE
	from board
    join member using (m_no)
	where B_NO = #{boardNo}
	
	</select>
	
	<update id="BoardViewUp">
	
	update board
	set B_VIEWS = B_VIEWS + 1
	where B_NO = #{boardNo}
	
	</update>
	
	<select id="selectReviewCK" resultMap="ReviewResultMap">
		select REVIEW_NO, REVIEW_TITLE, REVIEW_CONTENT, REVIEW_UPDATE_DATE,
			   REVIEW_VIEWS, STAR_RATING, M_NAME, B_NAME, B_IMAGE, REVIEW_BOOK_ISBN 
		from REVIEW
			join MEMBER using(M_NO)
			join BOOK on (REVIEW_BOOK_ISBN = ISBN)
		where REVIEW_NO = #{reviewNo}
	</select>
	
	<update id="ReviewViewUp">
		update review
		set REVIEW_VIEWS = REVIEW_VIEWS + 1
		where REVIEW_NO = #{reviewNo}
	</update>
	
	
	
	
	

</mapper>