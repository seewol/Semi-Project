<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="employeeMapper">
	<!-- 공지사항 검색결과 listCount -->
  	<select id="getNoticeListCount" resultType="_int">
  		select count(*)
  		from board
  			 join member using(m_no) 
  		<if test="noticeCategory == 'all'">
			where (B_NO like '%${noticeQuery}%' or B_TITLE like '%${noticeQuery}%' or M_NAME like '%${noticeQuery}%' or B_UPDATE_DATE like '%${noticeQuery}%')
				and B_TYPE = 1
		</if>
		<if test="noticeCategory != 'all'">
			where ${noticeCategory} like '%${noticeQuery}%'
				and B_TYPE = 1
		</if>	
  	</select>
  	
  	
  	<!-- 공지사항 검색결과 list -->
  	<select id="selectNoticeList" resultMap="noticeResultSet">
  		select *
		from board
  			 join member using(m_no) 
		<if test="noticeCategory == 'all'">
			where (B_NO like '%${noticeQuery}%' or B_TITLE like '%${noticeQuery}%' or M_NAME like '%${noticeQuery}%' or B_UPDATE_DATE like '%${noticeQuery}%')
				and b_type = 1
			order by B_NO desc
		</if>
		<if test="noticeCategory != 'all'">
			where ${noticeCategory} like '%${noticeQuery}%'
				and b_type = 1
			order by ${noticeCategory}
		</if>
			
  	</select>

  	<resultMap type="Board" id="noticeResultSet">
  		<id column="B_NO" property="boardNo"/>
  		<result column="M_NO" property="memberNo"/>
  		<result column="M_NAME" property="writer"/>
  		<result column="B_TITLE" property="boardTitle"/>
  		<result column="B_CONTENT" property="boardContent"/>
  		<result column="B_UPDATE_DATE" property="boardUpdateDate"/>
  		<result column="B_VIEWS" property="boardViews"/>
  		<result column="B_TYPE" property="boardType"/>
  	</resultMap>
  	
  	
  
  	
  	<!-- 공지사항 게시글 상세 조회 -->
  	<select id="selectNoticeBoardList" resultMap="noticeResultSet">
  		select *
  		from board
  			join member using(m_no)
  		where B_NO = #{boardNo}
  	</select>
  	
  	
  	
  	<!-- 공지사항 삭제 -->
  	<delete id="deleteNotice">
  		delete from board  
  		where B_NO = #{boardNo}
  	</delete>
  	
  	
  	<!-- 공지사항 수정 -->
  	<update id="updateNotice">
  		update BOARD
  		set B_TITLE = #{boardTitle}, B_CONTENT = #{boardContent}, B_UPDATE_DATE = SYSDATE
  		where B_NO =  #{boardNo}
  	</update>
  	
  	
  	<!-- 공지사항 등록 -->
  	<insert id="insertNotice">
  	
  		insert into board <!-- 로그인 연결시키면 수정 -->
  		values(SEQ_BOARD_NO.NEXTVAL, #{id}, #{boardTitle}, #{boardContent}, sysdate, default, 1)
  	</insert>
  	
  	
  	<!-- 유저 검색결과 listCount -->
  	<select id="selectUserListcount" resultType="_int">
  		select count(*)
  		from member
  		<if test="category == 'all'">
			where (m_no like '%${query}%' or m_id like '%${query}%' or m_name like '%${query}%' or is_rental like '%${query}%')
		</if>
		<if test="noticeCategory != 'all'">
			where ${category} like '%${query}%'
		</if>	
  	</select>
  	
  	<!-- 유저 검색결과 listCount -->
  	<select id="getUserSearchListCount" resultType="_int">
  		select count(*)
  		from member
  		<if test="category == 'all'">
			where (m_no like '%${query}%' or m_id like '%${query}%' or m_name like '%${query}%' or is_rental like '%${query}%')
		</if>
		<if test="category != 'all'">
			where ${category} like '%${query}%'
		</if>	
  	</select>
  	
  	<!-- 유저 검색결과 list -->
  	<select id="getUserSearchList" resultMap="userResultSet">
  		select *
  		from member
  		<if test="category == 'all'">
			where (m_no like '%${query}%' or m_id like '%${query}%' or m_name like '%${query}%' or is_rental like '%${query}%')
		</if>
		<if test="category != 'all'">
			where ${category} like '%${query}%'
		</if>
  	</select>
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	

  	<!-- 이용자 리스트 뽑아오기 -->
  	<select id="getUserListCount" resultType="_int">
  		select count(*)
  		from member
  	</select>
  	
  	
  	<!-- 이용자 게시글 목록을 토대로 페이징 처리 결과 받기 -->
  	
  	<select id="selectUserList" resultMap="userResultSet">
  		select *
  		from member
  		order by M_NO desc
  	</select>

  	<resultMap type="Member" id="userResultSet">
  		<id column="M_NO" property="memNo"/>
  		<result column="M_ID" property="memId"/>
  		<result column="PASSWORD" property="password"/>
  		<result column="M_NAME" property="memName"/>
  		<result column="PHONE" property="phone"/>
  		<result column="ENROLLDATE" property="enrollDate"/>
  		<result column="IS_RENTAL" property="isRental"/>   <!-- NULL 가능 --> <!-- 데이터 타입은 정수 -->
  		<result column="IS_ADMIN" property="isAdmin"/>
  		<result column="LOGIN_TYPE" property="loginType"/>
<!--   		<result column="KAKAO_ID" property="kakaoId"/> -->
  		<result column="M_STATUS" property="memStatus"/>
  	</resultMap>
  	
  	
  	
  	
 	<!-- 이용자 상세보기 -->
  	<select id="selectUserBoardList" resultMap="userResultSet">
  		select *
  		from member
  		where M_NO = #{mNo}
  	</select>
  	
  	
  	
  	<!-- 이용자 계정 상태 비활성화 및 활성화 -->
  	<update id="updateUser">
	    UPDATE MEMBER
	    <set>
	        <choose>
	            <when test="memStatus != 'Y'">
	                M_STATUS = #{value}
	            </when>
	            <otherwise>
	                M_STATUS = #{value}
	            </otherwise>
	        </choose>
	    </set>
	    WHERE M_NO = #{userNo}
	</update>


	<!-- 이용자 도서현황 조회하기 (있는 것 모두 가져오기) -->
	<select id="getUserBookList" resultType="_int">
<!-- 		SELECT COUNT(*) -->
<!-- 		FROM V_BOOK -->
<!-- 	    	JOIN BOOK_CHECK USING(BD_NO) -->
<!-- 	    	JOIN MEMBER USING(M_NO) -->
<!-- 		select count(*) -->
<!-- 		from v_book -->
<!--     		left join v_bookcheck using(bd_no) -->
<!--         where rent_no is not null -->
		select count(*)
		from (select *
		        from  member
		            join book_check using(m_no)
		            join book_detail using(bd_no)
		            join book using(isbn))
		where is_return = 'N' and m_no = #{userNo}
		order by duedate desc
	</select>
	
	
	<select id="getUserBookRentList" resultMap="bookResultSet">
<!-- 			select * -->
<!-- 			from book_check -->
<!-- 			    join member using(m_no) -->
<!-- 			    join v_book using(bd_no) -->
<!-- 			where m_no = #{userNo} -->

<!-- 		select * -->
<!-- 		from (select * from v_book -->
<!--     				left join v_bookcheck using(bd_no) -->
<!--         	where rent_no is not null) -->
<!--         where m_no = #{userNo} -->
<!--         order by duedate 반납예정일자가 이른 순으로 -->
<!-- 		select * -->
<!-- 		from (select * from v_book -->
<!--     				left join v_bookcheck using(bd_no) -->
<!--         	where rent_no is not null and -->
<!--                 m_no = #{userNo} -->
<!--             ) -->
<!--         order by duedate -->
<!-- 			select * -->
<!-- 			from (select *  -->
<!-- 			        from member -->
<!-- 			            join book_check using (m_no) -->
<!-- 			        where m_no = #{userNo} and is_return = 'N') -->
<!-- 			    order by duedate --> 
			select *
			from (select *
			        from  member
			            join book_check using(m_no)
			            join book_detail using(bd_no)
			            join book using(isbn))
			where is_return = 'N' and m_no = #{userNo}
			order by duedate desc
	</select>
	
	
	<resultMap type="Book1" id="bookResultSet">
		<id column="RENT_NO" property="rentNo"/>
		<result column="M_NO" property="bookMemNo"/>
		<result column="BD_NO" property="bookDetailNumber"/>
  		<result column="ISBN" property="bookISBN"/>
  		<result column="B_NAME" property="bookName"/>
  		<result column="RENTDATE" property="rentDate"/>
  		<result column="DUEDATE" property="dueDate"/>
  		<result column="RETURNDATE" property="returnDate"/>
  		<result column="IS_RETURN" property="isReturn"/>
		<result column="B_IMAGE" property="bookImage"/>
	</resultMap>
	
	<!-- selectBookIsReturn -->
	<!-- 얘가 0이면 대출도서 없음. 반납완료 -->
	<select resultType="_int" id="selectBookIsReturn">
	       	select count(*)
			from (select *
			        from  member
			            join book_check using(m_no)
			            join book_detail using(bd_no)
			            join book using(isbn))
			where m_no = #{userNo} and is_return = 'N'
			order by duedate desc
	</select>
	
	
	
	
	
	
	
	<!-- ===============================팝업================================================= -->
	
	
	<!-- POPUP 테이블에 제목 삽입 -->
	<!-- 지금은 로그인을 안한 상태라서 직접 넣는데 로그인 연결하면 바꿔야 함. -->
	<!-- m_no은 로그인 세션 영역에서 받아오는 것임. -->
	<insert id="insertPopup">
		insert into popup
		values(new_fatm, 1005, #{popTitle})
	</insert>
	
	<!-- FILE_ATTM 테이블에 데이터 삽입! -->
	<!-- 지금은 로그인을 안한 상태라서 직접 넣는데 로그인 연결하면 바꿔야 함. -->
	<!--  insert all에는 시퀀스 사용 불가능. DB에서 펑션을 만들어서 사용하기 -->
	<insert id="insertAttm">
		insert all
		<foreach collection="list" item="item">
			into file_attm
			values(new_fatm, #{item.fileUrl}, #{item.fileType}, 
					#{item.fileName}, default, #{item.fileClassify}, 333, #{item.fileRename})
		</foreach>			
		select * from dual
	</insert>
	
	
	
	<!-- 팝업 게시글 가지고 오기  -->
	<!-- 팝업 테이블을 일단 조회하고 교육/문화프로그럄 테이블은 조인해서 가지고 오면 될 것 같은데? -->
	<!-- P_NO 끼리 조인? -->
	<select id="getPopupListCount" resultType="_int">
		select count(*)
		from popup
	</select>
	
	<select id="selectPopupList" resultMap="popupResultSet">
		select *
		from popup
	</select>
	
	<resultMap id="popupResultSet" type="Popup1">
		<id column="P_NO" property="popNo"/>
		<result column="M_NO" property="memberNo"/>
		<result column="P_TITLE" property="popTitle"/>
	</resultMap>
	
	

	<!-- 첨부파일 리스트도 가져오기 -->
	<select id="selectAttmList" resultMap="attachmentResultSet">
		select *
		from file_attm
	</select>
	
	
	<resultMap id="attachmentResultSet" type="Attachment">
		<id column="F_NO" property="fileNo"/>
		<result column="F_URL" property="fileUrl"/>
		<result column="F_TYPE" property="fileType"/>
		<result column="F_NAME" property="fileName"/>
		<result column="F_TEXT" property="fileText"/>
		<result column="F_CLASSIFY" property="fileClassify"/>
		<result column="B_NO" property="fileSequence"/>
		<result column="F_RENAME" property="fileRename"/>
		<result column="P_NO" property="popUpNum"/>
		<result column="P_TITLE" property="popupTitleAttm"/>
		<result column="M_NO" property="memberNumAttm"/>
		
	</resultMap>
	
	
	
	
	
	<!-- 이걸 사용하는게 나을 듯? -->
	<!-- 음... popup테이블이랑 file_attach 테이블 조인, 총 게시글 반환 -->
	<select id="selectJoinListCount" resultType="_int">
		select count(*)
		from popup
    		join member using(m_no)
    		join file_attm on (p_no = b_no)
		order by p_no desc
	</select>
		
		
	<select id="selectJoinList" resultMap="attachmentResultSet">
<!-- 		select * -->
<!-- 		from popup -->
<!-- 		   join file_attm on(p_no = b_no) -->
<!-- 		order by p_no desc -->
		 	select *
			from popup
	    		join member using(m_no)
	    		join file_attm on (p_no = b_no)
			order by p_no desc
	</select>
		
	
	<!-- attm_file 이랑 popup 조인하고 pId에 맞는 사진만 가져옴, 프라이머리 키 끼리 조인했기 때문에 null 없음 -->
		<select id="selectJoinListPopupAndAttm" resultMap="attachmentResultSet">
		 	select *
			from popup
	    		join member using(m_no)
		   	<if test="pId != null">
		   		where p_no = #{pId}
		   	</if>
			order by p_no desc
		</select>
	
	
	
	
</mapper>
